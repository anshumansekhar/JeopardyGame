{"version":3,"sources":["components/HelpScreen/index.js","components/Dialog/startGameDialog.js","components/Dialog/joinDialog.js","components/GameScreen/index.js","components/QuestionScreen/index.js","components/ScoreBoard/index.js","components/users/index.js","components/Chat/index.js","App.js","reducers/index.js","store/index.js","index.js"],"names":["HelpScreen","props","StartGameDialog","cancelRef","useRef","onNameInput","onPlayerSelected","closeStart","leastDestructiveRef","type","onInput","e","name","id","onChange","value","className","onClick","ref","JoinGameDialog","onRoomInput","closeJoin","GameScreen","amountCards","Business","onAmountClicked","Sports","Films","Editorial","QuestionScreen","colSpan","question","text","handleAnswerInput","answer","onAnswerSubmit","ScoreBoard","scoreBoard","list","map","element","score","UsersScreen","listItems","players","player","currentPlayer","playerName","ChatBox","App","amountCardsInit","socket","useSelector","state","useState","numPlayers","setNumplayers","setName","socketId","playerScore","user","setUser","message","setMessage","roomName","setRoomName","setCurrentPlayer","setQuestion","setAnswer","setAmountCards","setScoreBoard","setPlayer","showStartDialog","setShowStartDialog","showGame","setShowGame","showQuestion","setShowQuestion","showScoreBoard","setShowScoreBoard","showJoinDialog","setShowJoinDialog","showInstructions","setShowInstruction","useEffect","on","console","log","reason","msg","res","category","pos","amount","board","target","req","emit","by","playerId","gameRoom","Chat","io","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9750b3b3.chunk.js","sourcesContent":["import React from 'react'\n\n/**\n* @author\n* @function HelpScreen\n**/\n\nconst HelpScreen = (props) => {\n  return (\n    <div>\n      <h3>How to Start the Game:</h3>\n      <h4>For Host</h4>\n      <ol>\n        <li>Click on start Game</li>\n        <li>Enter your name and number of players for the room</li>\n        <li>After submitting a room code will be generated and displayed</li>\n        <li>Share the game code with other players</li>\n        <li>Wait for the required number of players to join the game, players added are displayed in the message box</li>\n      </ol>\n      <h4>For Players other than Host</h4>\n      <ol>\n        <li>Click on Join Game</li>\n        <li>Enter your name and Game Code</li>\n        <li>Submit and wait for the room to get full</li>\n      </ol>\n      <h4>How to play the Game</h4>\n        After the the required number of players have joined the game the game starts.\n      <ol>\n       <li> The player whose turn it is selects a category by clicking on the amount available </li>\n      <li>A clue is presented to the player and an answer box is displayed</li>\n      <li>The player enters the answer and submits</li>\n      <li>if correct the amount is added to the player's score else the amount is deducted</li>\n      <li>The Game ends when all the categories are over</li>\n      <li>The final count of the players is displayed in the Screen</li>\n\n          </ol>\n    </div >\n   )\n\n }\n\nexport default HelpScreen","import React, { useRef } from 'react';\nimport {\n    AlertDialog,\n    AlertDialogLabel\n} from \"@reach/alert-dialog\";\n\n/**\n* @author\n* @function StartGameDialog\n**/\n\nconst StartGameDialog = (props) => {\n    const cancelRef = useRef();\n    const onNameInput = props.onNameInput;\n    const onPlayerSelected = props.onPlayerSelected;\n    const closeStart = props.closeStart;\n    return (\n        <AlertDialog leastDestructiveRef={cancelRef}>\n            <AlertDialogLabel>&nbsp;Start a Game&nbsp;</AlertDialogLabel>\n            &nbsp;Enter Name:&nbsp;\n            <input type=\"text\" onInput={(e) => onNameInput(e)}></input>\n            &nbsp;\n            <select name=\"numPlayers\" id=\"numPlayers\" onChange={(e) => onPlayerSelected(e)}>\n                <option value=\"0\">Select NumPlayers</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n                <option value=\"6\">6</option>\n            </select>\n            <div className=\"alert-buttons\">\n                <button onClick={closeStart}>Start</button>{\" \"}\n                <button ref={cancelRef} onClick={closeStart}>\n                    Cancel\n      </button>\n            </div>\n        </AlertDialog>\n    )\n\n}\n\nexport default StartGameDialog","import React,{useRef} from 'react';\nimport {\n    AlertDialog,\n    AlertDialogLabel\n  } from \"@reach/alert-dialog\";\n\n/**\n* @author\n* @function JoinGameDialog\n**/\n\nconst JoinGameDialog = (props) => {\n  const cancelRef = useRef();\n  const onNameInput=props.onNameInput;\n  const onRoomInput=props.onRoomInput;\n  const closeJoin=props.closeJoin;\n  return(\n    <AlertDialog leastDestructiveRef={cancelRef}>\n          <AlertDialogLabel>Join a Game</AlertDialogLabel>\n          &nbsp;Enter Name:&nbsp;\n          <input type=\"text\" onInput={onNameInput}></input>\n          &nbsp;Enter Code:&nbsp;\n          <input type=\"text\" onInput={onRoomInput}></input>\n\n          <div className=\"alert-buttons\">\n            <button onClick={closeJoin}>Join</button>{\" \"}\n            <button ref={cancelRef} onClick={closeJoin}>\n              Cancel\n            </button>\n          </div>\n        </AlertDialog>\n   )\n\n }\n\nexport default JoinGameDialog","import React from 'react'\n\n/**\n* @author\n* @function GameScreen\n**/\n\nconst GameScreen = (props) => {\n\n    return (\n        <>\n            <table className=\"game\">\n                <thead className=\"content-name\">\n                    <tr>\n                        <th>Business</th>\n                        <th>Sports</th>\n                        <th>Films</th>\n                        <th>Editorial</th>\n                    </tr>\n                </thead>\n                <tbody className=\"content-money\">\n                    <tr>\n                        {/* if amountCards business is true render this else render empty td */}\n                        {\n                            props.amountCards.Business[0]\n                                ? <td onClick={(e) => props.onAmountClicked(200, 'Business')}>₹200</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Sports[0]\n                                ? <td onClick={(e) => props.onAmountClicked(200, 'Sports')}>₹200</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Films[0]\n                                ? <td onClick={(e) => props.onAmountClicked(200, 'Films')}>₹200</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Editorial[0]\n                                ?\n                                <td onClick={(e) => props.onAmountClicked(200, 'Editorial')}>₹200</td>\n                                : <td></td>\n                        }\n                    </tr>\n                    <tr>\n                        {\n                            props.amountCards.Business[1]\n                                ? <td onClick={(e) => props.onAmountClicked(400, 'Business')}>₹400</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Sports[1]\n                                ? <td onClick={(e) => props.onAmountClicked(400, 'Sports')}>₹400</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Films[1]\n                                ? <td onClick={(e) => props.onAmountClicked(400, 'Films')}>₹400</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Editorial[1]\n                                ? <td onClick={(e) => props.onAmountClicked(400, 'Editorial')}>₹400</td>\n                                : <td></td>\n                        }\n                    </tr>\n                    <tr>\n                        {\n                            props.amountCards.Business[2]\n                                ? <td onClick={(e) => props.onAmountClicked(600, 'Business')}>₹600</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Sports[2]\n                                ? <td onClick={(e) => props.onAmountClicked(600, 'Sports')}>₹600</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Films[2]\n                                ? <td onClick={(e) => props.onAmountClicked(600, 'Films')}>₹600</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Editorial[2]\n                                ? <td onClick={(e) => props.onAmountClicked(600, 'Editorial')}>₹600</td>\n                                : <td></td>\n                        }\n                    </tr>\n                    <tr>\n                        {\n                            props.amountCards.Business[3]\n                                ? <td onClick={(e) => props.onAmountClicked(800, 'Business')}>₹800</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Sports[3]\n                                ? <td onClick={(e) => props.onAmountClicked(800, 'Sports')}>₹800</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Films[3]\n                                ? <td onClick={(e) => props.onAmountClicked(800, 'Films')}>₹800</td>\n                                : <td></td>\n\n                        }\n                        {\n                            props.amountCards.Editorial[3]\n                                ? <td onClick={(e) => props.onAmountClicked(800, 'Editorial')}>₹800</td>\n                                : <td></td>\n                        }\n                    </tr>\n                    <tr>\n                        {\n                            props.amountCards.Business[4]\n                                ? <td onClick={(e) => props.onAmountClicked(1000, 'Business')}>₹1000</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Sports[4]\n                                ? <td onClick={(e) => props.onAmountClicked(1000, 'Sports')}>₹1000</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Films[4]\n                                ? <td onClick={(e) => props.onAmountClicked(1000, 'Films')}>₹1000</td>\n                                : <td></td>\n                        }\n                        {\n                            props.amountCards.Editorial[4]\n                                ? <td onClick={(e) => props.onAmountClicked(1000, 'Editorial')}>₹1000</td>\n                                : <td></td>\n                        }\n                    </tr>\n                </tbody>\n            </table>\n        </>\n    )\n\n}\n\nexport default GameScreen","import React from 'react'\n\n/**\n* @author\n* @function QuestionScreen\n**/\n\nconst QuestionScreen = (props) => {\n    return (\n        <>\n            <table >\n                <tr>\n                    <td colSpan=\"7\" className=\"content-money\">{props.question.text}</td>\n                </tr>\n                <tr >\n                    <td colSpan=\"7\">Answer&nbsp;\n        <input type=\"text\" onInput={(e) =>props.handleAnswerInput(e)} value={props.answer}></input>\n                    </td>\n                </tr>\n                <tr>\n                    <td colSpan=\"7\">\n                        <button onClick={(e) => props.onAnswerSubmit()}>Submit</button>\n                    </td>\n                </tr>\n            </table>\n        </>\n    )\n\n}\n\nexport default QuestionScreen","import React from 'react'\n\n/**\n* @author\n* @function ScoreBoard\n**/\n\nconst ScoreBoard = (props) => {\n    return (\n        <>\n            <table>\n                <tr>\n                    <td colSpan=\"2\" className=\"content-money\">ScoreBoard</td>\n                </tr>\n                {\n                    props.scoreBoard.list.map(element => (\n                        <tr key={element.name}>\n                            <td className=\"content-money\">{element.name}</td>\n                            <td className=\"content-money\">{element.score}</td>\n                        </tr>\n                    ))\n                }\n            </table>\n        </>\n    )\n\n}\n\nexport default ScoreBoard","import React from 'react'\n\n/**\n* @author\n* @function UsersScreen\n**/\n\nconst UsersScreen = (props) => {\n    const listItems = props.players.map((player) =>\n        props.currentPlayer === player ?\n            <li>Yoour {player.playerName}</li>\n            : <li>{player.playerName}</li>\n    );\n\n    return (\n        <div>\n            <h4>Players in the Game</h4>\n            <ol>{listItems}</ol>\n\n            {props.currentPlayer ?\n                <h5>Turn:{props.currentPlayer.playerName}</h5>\n                : <></>}\n        </div>\n    )\n\n}\n\nexport default UsersScreen","import React from 'react'\n\n/**\n* @author\n* @function ChatBox\n* Chat Box Component to display chat messages\n**/\n\nconst ChatBox = (props) => {\n  return (\n    <>\n    <div>\n      ChatBox\n      <div>\n        <div className=\"chatBox\">messages</div>\n        <input type=\"textbox\"></input>\n        <input type=\"button\" value=\"send\"></input>\n      </div>\n      </div>\n    </>\n  )\n\n}\n\nexport default ChatBox","/*\n  App component for the application\n*/\n\n// TODO create separate compenents for differnt pages\nimport './App.css';\nimport { useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport HelpScreen from './components/HelpScreen';\nimport StartGameDialog from './components/Dialog/startGameDialog';\nimport JoinGameDialog from './components/Dialog/joinDialog';\nimport GameScreen from './components/GameScreen';\nimport QuestionScreen from './components/QuestionScreen';\nimport ScoreBoard from './components/ScoreBoard';\nimport UsersScreen from './components/users';\nimport ChatBox from './components/Chat';\n\n\nfunction App() {\n\n  // default objects\n\n  // defaults user object\n  // contains socketid ,name and score\n  const tempUser = {\n    socketId: \"\",\n    playerName: \"\",\n    playerScore: 0\n  }\n\n  // default amount cards object\n  // all categories and amount is set to true initially\n  let amountCardsInit = {\n    Business: [true, true, true, true, true],\n    Sports: [true, true, true, true, true],\n    Films: [true, true, true, true, true],\n    Editorial: [true, true, true, true, true],\n  }\n\n  // default scoreboard for testing\n  const scoreB = {\n    list: [\n      {\n        name: \"Anshuman\",\n        score: 100\n      },\n      {\n        name: \"Ayushman\",\n        score: 100\n      }\n    ]\n  }\n\n  // get socket from the provider state\n  const socket = useSelector((state) => state);\n\n\n\n  // states present in app\n\n  // numplayers state to store number of players\n  const [numPlayers, setNumplayers] = useState(0);\n  // name state to store player name\n  const [name, setName] = useState(\"\");\n  // user state to store user name\n  const [user, setUser] = useState(tempUser);\n  // message state to store message\n  const [message, setMessage] = useState('');\n  // roomName state to store room name\n  const [roomName, setRoomName] = useState('');\n  // currentPlayer state which store player whose turn it is to play\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  // question state to store question\n  const [question, setQuestion] = useState(\"\");\n  // answer state to store answer\n  const [answer, setAnswer] = useState(\"\");\n  // amountCards state to store category amount cards\n  let [amountCards, setAmountCards] = useState(amountCardsInit);\n  // scoreBoard state to store scoreboard\n  const [scoreBoard, setScoreBoard] = useState(scoreB);\n  // players state to store list of players in the game room\n  const [players,setPlayer]=useState([]);\n\n  // showStartDialog state to store if StartGameDialog is to be shown\n  const [showStartDialog, setShowStartDialog] = useState(false);\n  // showGame state to store if Game Screen is to be shown\n  const [showGame, setShowGame] = useState(false);\n  // showQuestion state to store if Question Screen is to be shown\n  const [showQuestion, setShowQuestion] = useState(false);\n  // showScoreBoard state to store if scoreboard screen is to be shown \n  const [showScoreBoard, setShowScoreBoard] = useState(false);\n  // showJoinDialog state to store if join dialog is to be shown\n  const [showJoinDialog, setShowJoinDialog] = useState(false);\n  // showInstructions state to store if instructions is to be shown\n  const [showInstructions, setShowInstruction] = useState(true);\n\n\n  useEffect(() => {\n    // when the socket connects to server\n    socket.on('connect', function () {\n      // log connected\n      console.log('Connected!' + socket.id);\n    });\n    // when the socket disconnets from the server\n    socket.on(\"disconnect\", (reason) => {\n      // log disconnected and reason\n      console.log(\"Disconnected\");\n      console.log(reason);\n    });\n    // if connection error happens\n    socket.on(\"connect_error\", () => {\n      // log error\n      console.log(\"connection error\");\n    });\n\n    // when gameCreated event is sent by server\n    // get room name and message\n    socket.on(\"gameCreated\", (roomName, message) => {\n      // set the current room name\n      setRoomName(roomName);\n      // initialize amount cards to default values\n      setAmountCards(amountCardsInit);\n      \n      // set message as room created\n      setMessage(`Room created ${roomName} ${message}`)\n    })\n    // when userDetails event is recieved by the socket\n    socket.on(\"userDetails\", (user) => {\n      // set user to the user object recived\n      setUser(user);\n    })\n    // when game join fails\n    socket.on(\"joinGameFailed\", message => {\n      // display error message\n      setMessage(message);\n    })\n\n    // when a playerJoined event is recieved\n    socket.on(\"playerJoined\", (message, player,players) => {\n      // form the message that player has joined\n      const msg = message + player.playerName + \" Joined\";\n      // set message\n      setMessage(msg);\n      // set players\n      setPlayer([...players]);\n    })\n    // when startGame event is recieved\n    socket.on(\"startGame\", (message) => {\n      // set message\n      setMessage(message);\n      // set show game to true\n      setShowGame(true);\n      // show game instruction\n      setShowInstruction(false);\n    })\n    // when takeTurn event is recieved\n    socket.on(\"takeTurn\", (message, player) => {\n      // set message \n      setMessage(message);\n      // set current player\n      setCurrentPlayer(player)\n    })\n    // on recieving category selected response event\n    socket.on(\"categorySelectedResponse\", (message, res) => {\n      // set message\n      setMessage(message);\n      // get category\n      const category = res.category;\n      // calculate position using amount\n      const pos = (res.amount / 200) - 1;\n      // change the respective amount card to false\n      amountCards[category][pos] = false;\n      setAmountCards(amountCards);\n    });\n    // on recieving Question event\n    socket.on(\"Question\", question => {\n      // set the question\n      setQuestion(question);\n    })\n    // on update Score event\n    socket.on(\"UpdateScore\", user => {\n      // set user\n      setUser(user);\n    })\n    // on end game event\n    socket.on(\"EndGame\", (message, board) => {\n      // set message\n      setMessage(message);\n      // set show game to false\n      setShowGame(false);\n      // set show question to false\n      setShowQuestion(false);\n      // set score board to score board recieved\n      setScoreBoard({ list: [...board] });\n      // set show score board to true\n      setShowScoreBoard(true);\n    })\n\n  }, 0);\n\n\n  // openStart funtion \n  // fired when player clicks on start button\n  const openStart = () => {\n    // set show start dialog to true\n    setShowStartDialog(true);\n    // set show join dialog to false\n    setShowJoinDialog(false);\n  };\n  // closeStart funtion\n  // fired when player submits game room details\n  const closeStart = () => {\n    // form request object\n    const req = {\n      playerName: name,\n      numPlayers: numPlayers\n    }\n    // send createGame event\n    socket.emit(\"createGame\", req);\n    // set show start dialog to false\n    setShowStartDialog(false)\n  };\n\n  // onNameInput funtion\n  // fired when name is entered\n  const onNameInput = (e) => {\n    // set name to the name entered\n    setName(e.target.value)\n  }\n\n  // onRoomInput function\n  // fired when room name/code is entered\n  const onRoomInput = (e) => {\n    // set room name to room name entered\n    setRoomName(e.target.value);\n  }\n\n\n  // openJoin function\n  // fired when join button is clicked\n  const openJoin = () => {\n    // set show start dialog to false\n    setShowStartDialog(false);\n    // set show join dialog to true\n    setShowJoinDialog(true)\n  };\n  // closeJoin function\n  // fired when submit is clicked in join screen\n  const closeJoin = () => {\n    // form a request object\n    const req = {\n      playerName: name,\n      roomName: roomName\n    }\n    // send joinGame event\n    socket.emit(\"joinGame\", req);\n    // set show join dialog to false\n    setShowJoinDialog(false)\n  };\n\n  // when a number of players is selected \n  const onPlayerSelected = (e) => {\n    // set num of players to target value\n    setNumplayers(e.target.value);\n  }\n\n  // when player choose an amount from the table\n  const onAmountClicked = (amount, category) => {\n    if (currentPlayer.playerName === name) {\n      // if it the player turn to select\n      // form request object to send\n      const req = {\n        amount: amount,\n        category: category,\n        by: name,\n        roomName: roomName\n      }\n      // send categorySelected event\n      socket.emit(\"categorySelected\", req);\n      // set show game to false\n      setShowGame(false);\n      // set show question to true\n      setShowQuestion(true);\n    }\n    else {\n      // if it is not the players turn\n      // set message\n      setMessage(\"Not your Turn\");\n    }\n  }\n\n  // when answer is submit\n  const onAnswerSubmit = () => {\n    // clear the answer input box\n    setAnswer(\"\");\n    // prepare request object to send\n    const req = {\n      answer: answer,\n      question: question,\n      playerId: user.id,\n      gameRoom: roomName\n    }\n    // send Answer event\n    socket.emit(\"Answer\", req);\n    // set show question to false\n    setShowQuestion(false);\n    // set show game to true\n    setShowGame(true);\n  }\n\n  // when answer is entered\n  const handleAnswerInput = (e) => {\n    // set answer to answer entered\n    setAnswer(e.target.value);\n  }\n\n  // return the following JSX code\n  // react renders it when any state changes\n  return (\n\n    <>\n      {/* top header */}\n      <div className=\"header\">\n        <button onClick={openStart}>Start Game</button>\n        <input className=\"message\" value={message}></input>\n        <button onClick={openJoin}>Join Game</button>\n      </div>\n      {/* second row header */}\n      <div className=\"header\">\n        <div>Name:{user.playerName}</div>\n        <div>Room Code:{roomName}</div>\n        <div>Amount:₹{user.playerScore}</div>\n      </div>\n      <div className=\"main\">\n        {/* display users screen in the left side */}\n        <UsersScreen\n        players={players}\n        currentPlayer={currentPlayer}/>\n        {showInstructions && <HelpScreen />}\n        {/* if showStartDialog is set to true then render this */}\n        {/* start game dialog containg name and num of players drop down*/}\n        {\n          showStartDialog &&\n          (<StartGameDialog\n            onNameInput={onNameInput}\n            onPlayerSelected={onPlayerSelected}\n            closeStart={closeStart}\n          />)\n        }\n        {/* if showJoinDialog is true render join dialog */}\n        {/* contains name and code input */}\n        {\n          showJoinDialog &&\n          (<JoinGameDialog\n            onNameInput={onNameInput}\n            onRoomInput={onRoomInput}\n            closeJoin={closeJoin}\n          />\n\n          )}\n        {/* when showGame is set to true render categories screen */}\n        {/* contains 6*4 table  displaying various categories and amounts*/}\n        {/* get the items to display from amountCards object */}\n        {\n          showGame && (<GameScreen\n            amountCards={amountCards}\n            onAmountClicked={onAmountClicked} />\n\n          )\n        }\n        {/* if showQuestion is set to true render question screen */}\n        {/* contains question and answer input with a submit button */}\n        {\n          showQuestion && (<QuestionScreen\n            question={question}\n            handleAnswerInput={handleAnswerInput}\n            answer={answer}\n            onAnswerSubmit={onAnswerSubmit} />\n\n          )\n        }\n        {/* render this when showScoreBoard is set to true */}\n        {/* it is a table containing all the player names and score */}\n        {\n          showScoreBoard && (<ScoreBoard\n            scoreBoard={scoreBoard} />\n\n          )\n        }\n        {/* displat Chat box */}\n        <ChatBox/>\n      </div>\n    </>\n  )\n}\n// export the App function\nexport default App;\n\n","// get io from socket.io-client module\nimport { io } from 'socket.io-client';\n// establish socket connection to the jeopardy server\nconst socket = io('https://jeopardygamebackend.herokuapp.com/');\n// const socket=io('http://localhost:7000')\n\n// export the socket object\nexport default () => socket;","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// import rootReducer from reducers\nimport rootReducer from '../reducers';\nimport thunk from \"redux-thunk\";\n\n// create store object using rootReducer object\nconst store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware(thunk)\n));\n\n// export the store object\nexport default store;","/*\n  Jeopardy Game front End React JS app\n  a single page mulitplayer application to play jeopardy \n  player create and join rooms\n  player answer question\n  when game ends score boards is diplayed \n*/\n\n// import React,ReactDOM \n// import app and css file\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n// import provided from react react-redux\nimport { Provider } from 'react-redux';\n\n// get store from store file\nimport store from './store';\n// render the react app providing store object\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}