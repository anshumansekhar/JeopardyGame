{"version":3,"sources":["App.js","reducers/index.js","store/index.js","index.js"],"names":["App","socket","useSelector","state","cancelRef","useRef","useState","numPlayers","setNumplayers","name","setName","socketId","playerName","playerScore","user","setUser","message","setMessage","roomName","setRoomName","currentPlayer","setCurrentPlayer","question","setQuestion","answer","setAnswer","Business","Sports","Films","Editorial","amountCards","setAmountCards","list","score","scoreBoard","setScoreBoard","showStartDialog","setShowStartDialog","showGame","setShowGame","showQuestion","setShowQuestion","showScoreBoard","setShowScoreBoard","showJoinDialog","setShowJoinDialog","on","console","log","id","reason","player","msg","res","category","pos","amount","categoryCards","prevState","board","closeStart","req","emit","onNameInput","e","target","value","closeJoin","onAmountClicked","by","className","onClick","leastDestructiveRef","type","onInput","onChange","onPlayerSelected","ref","colSpan","text","handleAnswerInput","playerId","gameRoom","onAnswerSubmit","map","element","io","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62651cbb.chunk.js","sourcesContent":["/*\n  App component for the application\n*/\n\n// TODO create separate compenents for differnt pages\nimport './App.css';\nimport { useSelector } from 'react-redux';\nimport { useRef, useState } from 'react';\n\nimport {\n  AlertDialog,\n  AlertDialogLabel\n} from \"@reach/alert-dialog\";\n\n\n\nfunction App() {\n\n  // default objects\n\n  // defaults user object\n  // contains socketid ,name and score\n  const tempUser = {\n    socketId: \"\",\n    playerName: \"\",\n    playerScore: 0\n  }\n\n  // default amount cards object\n  // all categories and amount is set to true initially\n  const amountCardsInit = {\n    Business: [true, true, true, true, true],\n    Sports: [true, true, true, true, true],\n    Films: [true, true, true, true, true],\n    Editorial: [true, true, true, true, true],\n  }\n\n  // default scoreboard for testing\n  const scoreB = {\n    list: [\n      {\n        name: \"Anshuman\",\n        score: 100\n      },\n      {\n        name: \"Ayushman\",\n        score: 100\n      }\n    ]\n  }\n\n  // get socket from the provider state\n  const socket = useSelector((state) => state);\n\n  const cancelRef = useRef();\n\n  // states present in app\n\n  // numplayers state to store number of players\n  const [numPlayers, setNumplayers] = useState(0);\n  // name state to store player name\n  const [name, setName] = useState(\"\");\n  // user state to store user name\n  const [user, setUser] = useState(tempUser);\n  // message state to store message\n  const [message, setMessage] = useState('');\n  // roomName state to store room name\n  const [roomName, setRoomName] = useState('');\n  // currentPlayer state which store player whose turn it is to play\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  // question state to store question\n  const [question, setQuestion] = useState(\"\");\n  // answer state to store answer\n  const [answer, setAnswer] = useState(\"\");\n  // amountCards state to store category amount cards\n  const [amountCards, setAmountCards] = useState(amountCardsInit);\n  // scoreBoard state to store scoreboard\n  const [scoreBoard, setScoreBoard] = useState(scoreB);\n\n  // showStartDialog state to store if StartGameDialog is to be shown\n  const [showStartDialog, setShowStartDialog] = useState(false);\n  // showGame state to store if Game Screen is to be shown\n  const [showGame, setShowGame] = useState(false);\n  // showQuestion state to store if Question Screen is to be shown\n  const [showQuestion, setShowQuestion] = useState(false);\n  // showScoreBoard state to store if scoreboard screen is to be shown \n  const [showScoreBoard, setShowScoreBoard] = useState(false);\n  // showJoinDialog state to store if join dialog is to be shown\n  const [showJoinDialog, setShowJoinDialog] = useState(false);\n\n\n  // when the socket connects to server\n  socket.on('connect', function () {\n    // log connected\n    console.log('Connected!' + socket.id);\n  });\n  // when the socket disconnets from the server\n  socket.on(\"disconnect\", (reason) => {\n    // log disconnected and reason\n    console.log(\"Disconnected\");\n    console.log(reason);\n  });\n  // if connection error happens\n  socket.on(\"connect_error\", () => {\n    // log error\n    console.log(\"connection error\");\n  });\n\n  // when gameCreated event is sent by server\n  // get room name and message\n  socket.on(\"gameCreated\", (roomName, message) => {\n    // set the current room name\n    setRoomName(roomName);\n    // set message as room created\n    setMessage(`Room created ${roomName} ${message}`)\n  })\n  // when userDetails event is recieved by the socket\n  socket.on(\"userDetails\", (user) => {\n    // set user to the user object recived\n    setUser(user)\n  })\n\n  // when a playerJoined event is recieved\n  socket.on(\"playerJoined\", (message,player) => {\n    // form the message that player has joined\n    const msg=message+player.playerName+\" Joined\";\n    // set message\n    setMessage(msg);\n  })\n  // when startGame event is recieved\n  socket.on(\"startGame\", (message) => {\n    // set message\n    setMessage(message);\n    // set show game to true\n    setShowGame(true);\n  })\n  // when takeTurn event is recieved\n  socket.on(\"takeTurn\", (message, player) => {\n    // set message \n    setMessage(message);\n    // set current player\n    setCurrentPlayer(player)\n  })\n  // on recieving category selected response event\n  socket.on(\"categorySelectedResponse\", (message, res) => {\n    // set message\n    setMessage(message);\n    // get category\n    const category = res.category;\n    // calculate position using amount\n    const pos = (res.amount / 200) - 1;\n    // get all the amounts from the category\n    let categoryCards = amountCards[category];\n    // set the position calculated to false\n    categoryCards[pos] = false;\n    // set amount cards to new amount cards object\n    setAmountCards(prevState => ({\n      ...prevState,\n      category: {\n        ...categoryCards\n      }\n    }))\n  });\n  // on recieving Question event\n  socket.on(\"Question\", question => {\n    // set the question\n    setQuestion(question);\n  })\n  // on update Score event\n  socket.on(\"UpdateScore\", user => {\n    // set user\n    setUser(user);\n  })\n  // on end game event\n  socket.on(\"EndGame\", (message, board) => {\n    // set message\n    setMessage(message);\n    // set show game to false\n    setShowGame(false);\n    // set show question to false\n    setShowQuestion(false);\n    // set score board to score board recieved\n    setScoreBoard({ list: [...board] });\n    // set show score board to true\n    setShowScoreBoard(true);\n  })\n\n  // openStart funtion \n  // fired when player clicks on start button\n  const openStart = () => {\n    // set show start dialog to true\n    setShowStartDialog(true);\n    // set show join dialog to false\n    setShowJoinDialog(false);\n  };\n  // closeStart funtion\n  // fired when player submits game room details\n  const closeStart = () => {\n    // form request object\n    const req = {\n      playerName: name,\n      numPlayers: numPlayers\n    }\n    // send createGame event\n    socket.emit(\"createGame\", req);\n    // set show start dialog to false\n    setShowStartDialog(false)\n  };\n\n  // onNameInput funtion\n  // fired when name is entered\n  const onNameInput = (e) => {\n    // set name to the name entered\n    setName(e.target.value)\n  }\n\n  // onRoomInput function\n  // fired when room name/code is entered\n  const onRoomInput = (e) => {\n    // set room name to room name entered\n    setRoomName(e.target.value);\n  }\n \n\n  // openJoin function\n  // fired when join button is clicked\n  const openJoin = () => {\n    // set show start dialog to false\n    setShowStartDialog(false);\n    // set show join dialog to true\n    setShowJoinDialog(true)\n  };\n  // closeJoin function\n  // fired when submit is clicked in join screen\n  const closeJoin = () => {\n    // form a request object\n    const req = {\n      playerName: name,\n      roomName: roomName\n    }\n    // send joinGame event\n    socket.emit(\"joinGame\", req);\n    // set show join dialog to false\n    setShowJoinDialog(false)\n  };\n\n  // when a number of players is selected \n  const onPlayerSelected = (e) => {\n    // set num of players to target value\n    setNumplayers(e.target.value);\n  }\n\n  // when player choose an amount from the table\n  const onAmountClicked = (amount, category) => {\n    if (currentPlayer.playerName === name) {\n      // if it the player turn to select\n      // form request object to send\n      const req = {\n        amount: amount,\n        category: category,\n        by: name,\n        roomName: roomName\n      }\n      // send categorySelected event\n      socket.emit(\"categorySelected\", req);\n      // set show game to false\n      setShowGame(false);\n      // set show question to true\n      setShowQuestion(true);\n    }\n    else {\n      // if it is not the players turn\n      // set message\n      setMessage(\"Not your Turn\");\n    }\n  }\n\n  // when answer is submit\n  const onAnswerSubmit = () => {\n    // clear the answer input box\n    setAnswer(\"\");\n    // prepare request object to send\n    const req = {\n      answer: answer,\n      question: question,\n      playerId: user.id,\n      gameRoom: roomName\n    }\n    // send Answer event\n    socket.emit(\"Answer\", req);\n    // set show question to false\n    setShowQuestion(false);\n    // set show game to true\n    setShowGame(true);\n  }\n\n  // when answer is entered\n  const handleAnswerInput = (e) => {\n    // set answer to answer entered\n    setAnswer(e.target.value);\n  }\n\n// return the following JSX code\n// react renders it when any state changes\n  return (\n    <>\n    {/* top header */}\n      <div className=\"header\">\n        <button onClick={openStart}>Start Game</button>\n        <input className=\"message\" value={message}></input>\n        <button onClick={openJoin}>Join Game</button>\n      </div>\n      {/* second row header */}\n      <div className=\"header\">\n        <div>Name:{user.playerName}</div>\n        <div>Room Code:{roomName}</div>\n        <div>Amount:₹{user.playerScore}</div>\n      </div>\n\n{/* if showStartDialog is set to true then render this */}\n{/* start game dialog containg name and num of players drop down*/}\n      {showStartDialog && (\n        <AlertDialog leastDestructiveRef={cancelRef}>\n          <AlertDialogLabel>Start a Game</AlertDialogLabel>\n            Enter Name:\n          <input type=\"text\" onInput={(e) => onNameInput(e)}></input>\n          <select name=\"numPlayers\" id=\"numPlayers\" onChange={(e) => onPlayerSelected(e)}>\n            <option value=\"0\">Select NumPlayers</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n          </select>\n          <div className=\"alert-buttons\">\n            <button onClick={closeStart}>Start</button>{\" \"}\n            <button ref={cancelRef} onClick={closeStart}>\n              Cancel\n            </button>\n          </div>\n        </AlertDialog>\n      )}\n      {/* if showJoinDialog is true render join dialog */}\n      {/* contains name and code input */}\n      {showJoinDialog && (\n        <AlertDialog leastDestructiveRef={cancelRef}>\n          <AlertDialogLabel>Join a Game</AlertDialogLabel>\n            Enter Name:\n          <input type=\"text\" onInput={onNameInput}></input>\n            Enter Code:\n          <input type=\"text\" onInput={onRoomInput}></input>\n\n          <div className=\"alert-buttons\">\n            <button onClick={closeJoin}>Join</button>{\" \"}\n            <button ref={cancelRef} onClick={closeJoin}>\n              Cancel\n            </button>\n          </div>\n        </AlertDialog>\n      )}\n      {/* when showGame is set to true render categories screen */}\n      {/* contains 6*4 table  displaying various categories and amounts*/}\n      {/* get the items to display from amountCards object */}\n      {\n        showGame && (\n          <>\n            <table className=\"game\">\n              <thead className=\"content-name\">\n                <tr>\n                  <th>Business</th>\n                  <th>Sports</th>\n                  <th>Films</th>\n                  <th>Editorial</th>\n                </tr>\n              </thead>\n              <tbody className=\"content-money\">\n                <tr>\n                  {/* if amountCards business is true render this else render empty td */}\n                  {\n                    amountCards.Business[0]\n                      ? <td onClick={(e) => onAmountClicked(200, 'Business')}>₹200</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Sports[0]\n                      ? <td onClick={(e) => onAmountClicked(200, 'Sports')}>₹200</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Films[0]\n                      ? <td onClick={(e) => onAmountClicked(200, 'Films')}>₹200</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Editorial[0]\n                      ?\n                      <td onClick={(e) => onAmountClicked(200, 'Editorial')}>₹200</td>\n                      : <td></td>\n                  }\n                </tr>\n                <tr>\n                  {\n                    amountCards.Business[1]\n                      ? <td onClick={(e) => onAmountClicked(400, 'Business')}>₹400</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Sports[1]\n                      ? <td onClick={(e) => onAmountClicked(400, 'Sports')}>₹400</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Films[1]\n                      ? <td onClick={(e) => onAmountClicked(400, 'Films')}>₹400</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Editorial[1]\n                      ? <td onClick={(e) => onAmountClicked(400, 'Editorial')}>₹400</td>\n                      : <td></td>\n                  }\n                </tr>\n                <tr>\n                  {\n                    amountCards.Business[2]\n                      ? <td onClick={(e) => onAmountClicked(600, 'Business')}>₹600</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Sports[2]\n                      ? <td onClick={(e) => onAmountClicked(600, 'Sports')}>₹600</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Films[2]\n                      ? <td onClick={(e) => onAmountClicked(600, 'Films')}>₹600</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Editorial[2]\n                      ? <td onClick={(e) => onAmountClicked(600, 'Editorial')}>₹600</td>\n                      : <td></td>\n                  }\n                </tr>\n                <tr>\n                  {\n                    amountCards.Business[3]\n                      ? <td onClick={(e) => onAmountClicked(800, 'Business')}>₹800</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Sports[3]\n                      ? <td onClick={(e) => onAmountClicked(800, 'Sports')}>₹800</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Films[3]\n                      ? <td onClick={(e) => onAmountClicked(800, 'Films')}>₹800</td>\n                      : <td></td>\n\n                  }\n                  {\n                    amountCards.Editorial[3]\n                      ? <td onClick={(e) => onAmountClicked(800, 'Editorial')}>₹800</td>\n                      : <td></td>\n                  }\n                </tr>\n                <tr>\n                  {\n                    amountCards.Business[4]\n                      ? <td onClick={(e) => onAmountClicked(1000, 'Business')}>₹1000</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Sports[4]\n                      ? <td onClick={(e) => onAmountClicked(1000, 'Sports')}>₹1000</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Films[4]\n                      ? <td onClick={(e) => onAmountClicked(1000, 'Films')}>₹1000</td>\n                      : <td></td>\n                  }\n                  {\n                    amountCards.Editorial[4]\n                      ? <td onClick={(e) => onAmountClicked(1000, 'Editorial')}>₹1000</td>\n                      : <td></td>\n                  }\n                </tr>\n              </tbody>\n            </table>\n          </>\n        )\n      }\n      {/* if showQuestion is set to true render question screen */}\n      {/* contains question and answer input with a submit button */}\n      {\n        showQuestion && (\n          <>\n            <table >\n              <tr>\n                <td colSpan=\"7\">{question.text}</td>\n              </tr>\n              <tr >\n                <td colSpan=\"7\">Answer\n                <input type=\"text\" onInput={(e) => handleAnswerInput(e)} value={answer}></input>\n                </td>\n              </tr>\n              <tr>\n                <td colSpan=\"7\">\n                  <button onClick={(e) => onAnswerSubmit()}>Submit</button>\n                </td>\n              </tr>\n            </table>\n          </>\n        )\n      }\n      {/* render this when showScoreBoard is set to true */}\n      {/* it is a table containing all the player names and score */}\n      {\n        showScoreBoard && (\n          <>\n            <table>\n              <tr>\n                <td colSpan=\"2\">ScoreBoard</td>\n              </tr>\n              {\n                scoreBoard.list.map(element => (\n                  <tr key={element.name}>\n                    <td >{element.name}</td>\n                    <td >{element.score}</td>\n                  </tr>\n                ))\n              }\n            </table>\n          </>\n        )\n      }\n    </>\n  )\n}\n// export the App function\nexport default App;\n\n","// get io from socket.io-client module\nimport { io } from 'socket.io-client';\n// establish socket connection to the jeopardy server\nconst socket = io('https://jeopardygamebackend.herokuapp.com/');\n\n// export the socket object\nexport default () => socket;","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// import rootReducer from reducers\nimport rootReducer from '../reducers';\nimport thunk from \"redux-thunk\";\n\n// create store object using rootReducer object\nconst store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware(thunk)\n));\n\n// export the store object\nexport default store;","/*\n  Jeopardy Game front End React JS app\n  a single page mulitplayer application to play jeopardy \n  player create and join rooms\n  player answer question\n  when game ends score boards is diplayed \n*/\n\n// import React,ReactDOM \n// import app and css file\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n// import provided from react react-redux\nimport { Provider } from 'react-redux';\n\n// get store from store file\nimport store from './store';\n// render the react app providing store object\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}